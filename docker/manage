#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}
set -e

#
# Global utility functions - START
#
function echoRed (){
  _msg=${1}
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function echoYellow (){
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}"
}

function isInstalled () {
  rtnVal=$(type "$1" >/dev/null 2>&1)
  rtnCd=$?
  if [ ${rtnCd} -ne 0 ]; then
    return 1
  else
    return 0
  fi
}

function isCurlInstalled () {
  CURL_EXE=curl
  if ! isInstalled ${CURL_EXE}; then
    echoRed "The ${CURL_EXE} executable is required and was not found on your path."
    echoRed "If your shell of choice doesn't come with curl preinstalled, try installing it using either [Homebrew](https://brew.sh/) (MAC) or [Chocolatey](https://chocolatey.org/) (Windows)."
    exit 1
  fi
}

function isJQInstalled () {
  JQ_EXE=jq
  if ! isInstalled ${JQ_EXE}; then
    echoRed "The ${JQ_EXE} executable is required and was not found on your path."
    echoRed "Installation instructions can be found here: https://stedolan.github.io/jq/download"
    echoRed "Alternatively, a package manager such as Chocolatey (Windows) or Brew (Mac) can be used to install this dependecy."
    exit 1
  fi
}

function isNgrokInstalled () {
  NGROK_EXE=ngrok
  if ! isInstalled ${NGROK_EXE}; then
    echoRed "The ${NGROK_EXE} executable is needed and not on your path."
    echoRed "It can be downloaded from here: https://ngrok.com/download"
    echoRed "Alternatively, a package manager such as Chocolatey (Windows) or Brew (Mac) can be used to install this dependecy."
    exit 1
  fi
}

function checkNgrokTunnelActive () {
  if [ -z "${NGROK_AGENT_ENDPOINT}" ]; then
    echoRed "It appears that ngrok tunneling is not enabled."
    echoRed "Please open another shell in the scripts folder and execute start-ngrok.sh before trying again."
    exit 1
  fi
}

function customizeKeycloakConfig () {
  # Customize realm settings for development environment
  cp -f ./keycloak/config/realm-export.json ./keycloak/config/realm-export-docker.json
  if [ -z "$GITHUB_CLIENT_ID" ] || [ -z "$GITHUB_CLIENT_SECRET" ]; then
    echoYellow "The client id and/or secret for the integration of GitHub as IDP for Keycloak were not provided."
    echoYellow "Please set the GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET environment variables to use GitHub as your IDP."
    echoYellow "To get your  client id/secret combination, please visit: https://github.com/settings/developers"
    echoYellow "Press Ctrl+C now to stop, or wait to proceed without GitHub integration."
    sleep 8;
  else
    # Preparing Keycloak realm...
    echo "Configuring GitHub IDP integration for Keycloak..."
    sed -i "s/%GITHUB_CLIENT_ID%/$GITHUB_CLIENT_ID/g" ./keycloak/config/realm-export-docker.json
    sed -i "s/%GITHUB_CLIENT_SECRET%/$GITHUB_CLIENT_SECRET/g" ./keycloak/config/realm-export-docker.json
  fi
}

function generateKey(){
  (
    _length=${1:-48}
    # Format can be `-base64` or `-hex`
    _format=${2:--base64}

    echo $(openssl rand ${_format} ${_length})
  )
}

function generateSeed(){
  (
    _prefix=${1}
    _seed=$(echo "${_prefix}$(generateKey 32)" | fold -w 32 | head -n 1 )
    _seed=$(echo -n "${_seed}")
    echo ${_seed}
  )
}

#
# Global utility functions - END
#
SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

      Usage: $0 [command] [options]

      Commands:

      logs - Display the logs from the docker compose run (ctrl-c to exit).

      start - Runs the containers in production mode.
      up - Same as start.

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.

      down - Brings down the services and removes the volumes (storage) and containers.
      rm - Same as down

      provision - Only starts the agent and wallet, registers the agent on Sovrin Staging Net and accepts the TAA.
                  Automatically performed when start detects a first/clean run. 

EOF
  exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
pingAgent(){
  port=${1}

  # ping agent using a backchannel-exposed api
  rtnCd=$(${CURL_EXE} -s --write-out '%{http_code}' --output /dev/null http://localhost:${port}/api/doc)
  if (( ${rtnCd} == 200 )); then
    return 0
  else
    return 1
  fi
}

waitForAgent(){
  (
    # Wait for agent to start ...
    local startTime=${SECONDS}
    printf "Waiting for agent to start"
    while ! pingAgent ${@}; do
      printf "."
      local duration=$(($SECONDS - $startTime))
      if (( ${duration} >= ${AGENT_TIMEOUT} )); then
        echoRed "\nThe agent failed to start within ${duration} seconds.\n"
        exit 1
      fi
      sleep 1
    done
  )
}

registerSovrin() {
  did=${1}
  verkey=${2}
  ledger=${3:-"stagingnet"}
  
  if [ -z "${did}" ] || [ -z "${verkey}" ]|| [ -z "${ledger}" ]; then
    echoRed "\nresgisterSovrin; You MUST specify the following parameters:\n- did\n- verkey"
    exit 1
  fi
    
  echo -e "Registering agent on ${ledger} using DID:${AGENT_PUBLIC_DID}, Verkey: ${AGENT_VERKEY}...\n"

  # We need to pre-create the curl command, otherwise the execution could fail
  regCmd=$(echo "${CURL_EXE} \
      -s \
      -X POST \
      -H \"Content-Type: application/json charset=utf-8\" \
      -d \"{\\\"network\\\":\\\"${ledger}\\\",\\\"did\\\":\\\"${did}\\\",\\\"verkey\\\":\\\"${verkey}\\\",\\\"paymentaddr\\\":\\\"\\\"}\" \
      \"https://selfserve.sovrin.org/nym\"")
  REGISTER_DID_RESULT=$(eval ${regCmd})

  if [[ ! "200" == $(echo $REGISTER_DID_RESULT | ${JQ_EXE} -r '.statusCode') ]]; then
    echoRed "The agent registration failed with the following message: ${REGISTER_DID_RESULT}"
    docker-compose stop
    rm ".env"
    exit 1
  fi
}

generateTaaPayload() {
  ${CURL_EXE} \
      -s \
      -X GET \
      -H "X-Api-Key:${AGENT_ADMIN_API_KEY}" \
      "http://localhost:${AGENT_ADMIN_PORT}/ledger/taa" \
  | ${JQ_EXE} '{ "mechanism":"at_submission", "version": "\(.result.taa_record.version)", "text": "\(.result.taa_record.text)" }' \
  > taa_payload.json
}

acceptTAA() {
  generateTaaPayload

  TAA_ACCEPT_RESULT=$(${CURL_EXE} \
      -s \
      -X POST \
      -H "X-Api-Key:${AGENT_ADMIN_API_KEY}" \
      -H "Content-Type: application/json charset=utf-8" \
      -d @taa_payload.json \
      "http://localhost:${AGENT_ADMIN_PORT}/ledger/taa/accept")

  if [[ "${TAA_ACCEPT_RESULT}" == "{}" ]]; then
    echo -e "TAA accepted successfully \n"
    rm ./taa_payload.json
  else
    echoRed "Failed to accept TAA: ${TAA_ACCEPT_RESULT}"
    exit 1
  fi
}

provisionAgent(){
    if [[ ! -f ".env" ]]; then
      AGENT_WALLET_SEED=$(generateSeed dts-vc-issuer-demo)
      echo "Generated AGENT_WALLET_SEED=${AGENT_WALLET_SEED}"
      echo "AGENT_WALLET_SEED=${AGENT_WALLET_SEED}" > .env
    fi

    echo -e "\nStarting agent in read-only mode...\n"
    export AGENT_READ_ONLY_MODE="true"
    configureEnvironment "$@"
    docker-compose --env-file .env up -d wallet agent
    
    echo
    waitForAgent ${AGENT_ADMIN_PORT}

    echo -e "\nRetrieving agent configuration..."
    AGENT_PUBLIC_INFO=$(${CURL_EXE} \
                      -s \
                      -X GET \
                      -H  "accept: application/json" \
                      -H  "X-Api-Key: $AGENT_ADMIN_API_KEY"\
                      "http://localhost:${AGENT_ADMIN_PORT}/wallet/did/public")
    AGENT_PUBLIC_DID=$(echo $AGENT_PUBLIC_INFO | ${JQ_EXE} '.result.did')
    AGENT_VERKEY=$(echo $AGENT_PUBLIC_INFO | ${JQ_EXE} '.result.verkey')
    echo "AGENT_PUBLIC_DID=${AGENT_PUBLIC_DID}" >> .env
    echo "AGENT_VERKEY=${AGENT_VERKEY}" >> .env

    echo
    registerSovrin $AGENT_PUBLIC_DID $AGENT_VERKEY

    echo -e "Agent registered successfully, accepting TAA...\n"
    acceptTAA

    unset AGENT_READ_ONLY_MODE
    echo
    echo -e "Agent provisioning completed, ready for startup\n"
}

build() {
  echo -e "\nBuilding dts-vc-issuer-api development image..."
  docker build \
    -t 'dts-vc-issuer-api-dev' \
    -f './api/issuer/Dockerfile.dev' '..'

  echo -e "\nBuilding dts-vc-immunization-api development image..."
  docker build \
    -t 'dts-vc-immunization-api-dev' \
    -f './api/immunization/Dockerfile.dev' '..'
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift

    # echo "arg: ${arg}"
    # echo "Remaining: ${@}"

    case "$arg" in
      *=*)
        # echo "Exporting ..."
        export "${arg}"
        ;;
      *)
        # echo "Saving for later ..."
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  # Global
  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-"dts-vc-issuer"}"
  export DEBUG=${DEBUG}
  export LOG_LEVEL=${LOG_LEVEL:-"WARN"}
  export LEDGER_URL=${LEDGER_URL:-"https://raw.githubusercontent.com/sovrin-foundation/sovrin/stable/sovrin/pool_transactions_sandbox_genesis"}
  export TAILS_SERVER_URL=${TAILS_SERVER_URL:-"https://tails-dev.vonx.io"}
  export AGENT_TIMEOUT=30

  # frontend
  export FRONTEND_WEB_PORT=4200

  # db
  export DATABASE_USER="dbuser"
  export DATABASE_PASSWORD="dbpassword"
  export DATABASE_PORT="5432"

  # keycloak
  export KEYCLOAK_DB_VENDOR="POSTGRES"
  export KEYCLOAK_DB_ADDR="keycloak-db"
  export KEYCLOAK_USER="admin"
  export KEYCLOAK_PASSWORD="admin"
  export KEYCLOAK_IMPORT="/tmp/realm-export-docker.json"
  export KEYCLOAK_LOGLEVEL="WARN"
  export KEYCLOAK_ROOT_LOGLEVEL="WARN"

  # keycloak-db
  export KEYCLOAK_DB_NAME="keycloak"
  export KEYCLOAK_DB_USER="keycloak"
  export KEYCLOAK_DB_PASSWORD="keycloak"

  # wallet
  export WALLET_HOST="wallet"
  export WALLET_PORT="5432"
  export EXPOSED_WALLET_PORT="5434"
  export WALLET_USER="DB_USER"
  export WALLET_PASSWORD="DB_PASSWORD"

  # agent
  export AGENT_WALLET_NAME="dts_vc_issuer"
  export AGENT_WALLET_ENCRYPTION_KEY="key"
  export AGENT_WALLET_STORAGE_TYPE="postgres_storage"
  export AGENT_ADMIN_PORT=8024
  export AGENT_HTTP_IN_PORT=8021
  export AGENT_WS_IN_PORT=8026
  export AGENT_WEBHOOK_URL=${AGENT_WEBHOOK_URL:-http://issuer-api-dev:5000/api/webhooks}
  export AGENT_HTTP_INTERFACE_PORT=8021
  export AGENT_NAME="DTS VC Issuer"
  export AGENT_ENDPOINT=${NGROK_AGENT_ENDPOINT:-http://$DOCKERHOST:$AGENT_HTTP_INTERFACE_PORT}
  export AGENT_ADMIN_API_KEY=${AGENT_ADMIN_API_KEY:-"agent-api-key-dev"}
  export AGENT_ADMIN_MODE="admin-insecure-mode"
  if [ ! -z "${AGENT_ADMIN_API_KEY}" ]; then
    AGENT_ADMIN_MODE="admin-api-key ${AGENT_ADMIN_API_KEY}"
  fi
  export AGENT_READ_ONLY_MODE=${AGENT_READ_ONLY_MODE:-"false"}

  # issuer api
  export ISSUER_DATABASE_NAME="dts_issuer_db"
  export ISSUER_API_PORT=5000
  export ISSUER_AGENT_ADMIN_URL=${ISSUER_AGENT_ADMIN_URL:-http://agent:$AGENT_ADMIN_PORT}

  # immunization api
  export IMMUNIZATION_DATABASE_NAME="dts_immunization_db"
  export IMMUNIZATION_API_PORT=5001
}

getInputParams() {
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    *)
      ARGS+=" $arg"
      ;;
    esac
  done

  echo ${ARGS}
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/tob-web/.cache
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

echoRed (){
  _msg=${1}
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}${_msg}${_nc}" >&2
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}
# =================================================================================================================

pushd "${SCRIPT_HOME}" >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

_startupParams=$(getStartupParams --force-recreate $@)

case "${COMMAND}" in
  logs)
    configureEnvironment "$@"
    docker-compose logs -f
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  provision)
    isJQInstalled
    isCurlInstalled

    provisionAgent
  ;;
  start|start|up)
    isJQInstalled
    isCurlInstalled

    if [ -z "$NGROK_AGENT_ENDPOINT" ]; then
      isNgrokInstalled
      export NGROK_AGENT_ENDPOINT=$(${CURL_EXE} \
            -s \
            -X GET \
            "http://localhost:4040/api/tunnels" \
            | ${JQ_EXE} -r '.tunnels | map(select(.name | contains("issuer-agent"))) | .[0] | .public_url')
    fi

    checkNgrokTunnelActive
    echo "The agent endpoint is: ${NGROK_AGENT_ENDPOINT}"

    if [[ ! -f ".env" ]]; then
      echo "First/clean start detected, provisioning agent on Sovrin StagingNet..." 
      provisionAgent
    fi

    configureEnvironment "$@"
    # customizeKeycloakConfig
    docker-compose --env-file .env up -d ${_startupParams}
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment
    docker-compose stop
    ;;
  rm|down)
    if [ -f ".env" ] ; then
        rm ".env"
    fi
    if [ -f "taa_payload.json" ] ; then
        rm "taa_payload.json"
    fi
    configureEnvironment
    deleteVolumes
    ;;
  *)
    usage
    ;;
esac

popd >/dev/null
